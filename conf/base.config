/*
 * -------------------------------------------------
 *  gongyh/nf-core-scgs Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 12.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  // nf-core: Customise requirements for specific processes.
  // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
  withName: TRIMGALORE {
    cpus = { check_max( 16 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withName: KRAKEN {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withName: SATURATION {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName: BOWTIE2_ALIGN {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: MINIMAP2_ALIGN {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: SAMTOOLS {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: CIRCLIZE {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: INDELREALIGN {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: MONOVAR {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: ANEUFINDER {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 48.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName: PRESEQ {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName: QUALIMAP_BAMQC {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withName: NORMALIZE {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 12.h * task.attempt, 'time' ) }
  }
  withName: SPADES {
    maxForks = 1
    cpus = { check_max( 48 * task.attempt, 'cpus' ) }
    memory = { check_max( 250.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: CANU {
    maxForks = 2
    cpus = { check_max( 28 * task.attempt, 'cpus' ) }
    memory = { check_max( 128.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: REMAP {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: BLASTN {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: DIAMOND_BALSTX {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: SPLIT_CHECKM {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: SPLIT_CHECKM_EUKCC {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: BLOBTOOLS {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: REBLOBTOOLS {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: CHECKM_LINEAGEWF {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: EUKCC {
    cpus = { check_max( 32 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName: ACDC {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName: TSNE {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withLabel: QUAST {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: PROKKA {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: AUGUSTUS {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withName: EGGNOG {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: KOFAM {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: RESFINDER {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: POINTFINDER {
    cpus = { check_max( 24 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: GET_SOFTWARE_VERSIONS {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withLabel: MULTIQC {
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
}

executor {
  $local {
    cpus = 60
    queueSize = 10
    memory = 300.GB
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 300.GB
  max_cpus = 60
  max_time = 480.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}
