/*
 * -------------------------------------------------
 *  gongyh/nf-core-scgs Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

nextflow.enable.configProcessNamesValidation = false

// Global default params, used in configs
params {

  // Workflow flags
  input = null
  readPaths = null
  reads = "data/*{1,2}.fastq.gz"
  outdir = './results'
  fasta = null
  gff = null

  genome = null
  nanopore = false
  single_end = false
  vcf = null
  notrim = false
  saveTrimmed = false
  allow_multi_align = false
  saveAlignedIntermediates = false
  no_normalize = false
  euk = false
  fungus = false
  remap = false
  acdc = false
  genus = null
  snv = false
  cnv = false
  saturation = false
  bulk = false
  doubletd = false
  bbmap =false
  ass = false
  graphbin = false
  genomad = false
  prokka_proteins = null
  blastn = true
  kraken = true
  eggnog = true
  checkm2 = true
  blob = true
  gtdbtk = true
  kofam = true
  evalue = 1e-25
  blockSize = 2.0
  acquired = false
  point = false
  pointfinder_species = "escherichia_coli"
  augustus_species = "saccharomyces"
  split = false
  split_euk = false
  split_bac_level = "genus"
  split_euk_level = "genus"
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  uniprot_db = null
  uniprot_taxids = null
  kofam_profile = null
  kofam_kolist = null
  nt_db = null
  blob_db = null
  kraken_db = null
  kofam_profile = null
  kofam_kolist = null
  eggnog_db = null
  eukcc_db = null
  checkm2_db = null
  genomad_db = null
  gtdb = null
  ref = null

  show_hidden_params   = false
  schema_ignore_params = 'genomes'
  validationShowHiddenParams = false
  validationSchemaIgnoreParams = false

  // Boilerplate options
  multiqc_config = "$baseDir/assets/multiqc_config.yml"
  email = null
  maxMultiqcEmailFileSize = 25*1024*1024
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "s3://ngi-igenomes/igenomes/"
  igenomes_ignore = false
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = "-A test"
  awsqueue  = "default"
  awsregion = 'eu-west-1'
  hostnames = null
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_description = null
  config_profile_contact     = null
  config_profile_url         = null

  // dsl2 only
  blob_db = null
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = ''

// Load base.config by default for all pipelines
//includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  //includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  base { includeConfig 'conf/base.config' }
  standard { includeConfig 'conf/base.config' } // for k8s
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda {
    conda.enabled = true
    docker.enabled = false
    podman.enabled = false
    singularity.enabled = false
    apptainer.enabled = false
    conda.useMamba = false
    conda.useMicromamba = true
    conda.createOptions = '-c conda-forge -c bioconda --override-channels --strict-channel-priority --always-copy'
  }
  debug {
    dumpHashes           = true
    process.beforeScript = 'echo $HOSTNAME'
    cleanup              = false
  }
  docker {
    docker.enabled = true
    conda.enabled = false
    podman.enabled = false
    singularity.enabled = false
    apptainer.enabled = false
    docker.fixOwnership = true
  }
  podman {
    podman.enabled = true
    conda.enabled = false
    docker.enabled = false
    singularity.enabled = false
    apptainer.enabled = false
    temp = 'auto'
  }
  singularity {
    singularity.enabled = true
    conda.enabled = false
    docker.enabled = false
    podman.enabled = false
    apptainer.enabled = false
    singularity.autoMounts = true
    singularity.runOptions = '-e --no-home --fakeroot --writable-tmpfs'
  }
  apptainer {
    apptainer.enabled = true
    conda.enabled = false
    docker.enabled = false
    podman.enabled = false
    singularity.enabled = false
    apptainer.autoMounts = true
    apptainer.runOptions = '-e --no-home --fakeroot --writable-tmpfs'
  }
  k8s {
    process.executor = 'k8s'
    k8s.autoMountHostPaths = false
    k8s.launchDir = '/workspace/launch'
    k8s.workDir = '/workspace/work'
    k8s.projectDir = '/workspace/projects'
    k8s.pullPolicy = 'IfNotPresent'
    k8s.storageClaimName = 'nfpvc'
    k8s.storageMountPath = '/workspace'
  }
  test { includeConfig 'conf/test.config' }
  test_k8s { includeConfig 'conf/test_k8s.config' }
  test_denovo { includeConfig 'conf/test_denovo.config' }
  test_local { includeConfig 'conf/test_local.config' }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

docker.registry = 'quay.io'
podman.registry = 'quay.io'
process.ext.singularity_pull_docker_container = true
singularity.registry = 'quay.io'
apptainer.registry = 'quay.io'

// Load igenomes.config if required
if(!params.igenomes_ignore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/pipeline_dag.html"
}

manifest {
  name = 'nf-core/scgs'
  author = 'Yanhai Gong'
  homePage = 'https://github.com/gongyh/nf-core-scgs'
  description = 'Single Cell Genome Sequencing data analysis pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '!>=22.10.1'
  version = '2.0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
