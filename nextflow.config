/*
 * -------------------------------------------------
 *  gongyh/nf-core-scgs Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  input = null
  reads = "data/*{1,2}.fastq.gz"
  outdir = './results'
  publish_dir_mode = 'copy'

  show_hidden_params   = false
  schema_ignore_params = 'genomes'

  // Boilerplate options
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = null
  maxMultiqcEmailFileSize = 25*1024*1024
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "s3://ngi-igenomes/igenomes/"
  igenomes_ignore = false
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = "-A test"
  awsqueue  = "default"
  awsregion = 'eu-west-1'
  hostnames = null
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_description = "config_profile_description"
  config_profile_contact     = "config_profile_contact"
  config_profile_url         = "config_profile_url"
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'quay.io/gongyh/nf-core-scgs:v1.2'

// Load base.config by default for all pipelines
//includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  base { includeConfig 'conf/base.config' }
  standard { includeConfig 'conf/base.config' } // for k8s
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
    docker.runOptions = '-u $(id -u):$(id -g)'
    docker.registry = 'quay.io'
  }
  podman {
    podman.enabled = true
    podman.registry = 'quay.io'
    temp = 'auto'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.runOptions = '-e --no-home'
  }
  k8s {
    process.executor = 'k8s'
    k8s.autoMountHostPaths = false
    k8s.launchDir = '/workspace/launch'
    k8s.workDir = '/workspace/work'
    k8s.projectDir = '/workspace/projects'
    k8s.pullPolicy = 'IfNotPresent'
    k8s.storageClaimName = 'nfpvc'
    k8s.storageMountPath = '/workspace'
  }
  test { includeConfig 'conf/test.config' }
  test_k8s { includeConfig 'conf/test_k8s.config' }
  test_denovo { includeConfig 'conf/test_denovo.config' }
  test_local { includeConfig 'conf/test_local.config' }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load igenomes.config if required
if(!params.igenomes_ignore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  overwrite = true
  file = "${params.tracedir}/pipeline_dag.html"
}

manifest {
  name = 'nf-core/scgs'
  author = 'Yanhai Gong'
  homePage = 'https://github.com/nf-core/scgs'
  description = 'Single Cell Genome Sequencing data analysis pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '!>=22.04.0'
  version = '1.2dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
